XYZ Services Orchestrator
Introduction
The XYZ Services Orchestrator is a deployable component designed to facilitate seamless workflow execution across multiple participant services. Based on Spring Boot, this orchestrator library leverages predefined configurations stored in MongoDB to determine workflow steps dynamically. Client applications can import this library to add powerful orchestration capabilities with minimal setup.

Definitions
Orchestrator Runtime: This is a Spring Boot-based library that executes dynamic workflows based on predefined configurations stored in MongoDB collections.

Participant: A participant is a Spring Boot application that acts as a step in the workflow. It follows configurations provided in MongoDB for various attributes like Participant ID, communication interface (Kafka/HTTP(s)), and SLA details.

Prerequisites
MongoDB instance with workflow and participant configurations
Spring Boot application to host the Orchestrator
Predefined Kafka topics for initiation and events
Getting Started
Add the Orchestrator library as a dependency in your Spring Boot application.
Use the @EnableOrchestrator annotation to enable the Orchestrator functionalities.
Ensure MongoDB collections for workflow and participant configurations are correctly set up.
How To Use
Orchestrator Runtime
The orchestrator picks up configurations at runtime from MongoDB and caches them. It has an initiation endpoint that provides both REST and Kafka-based entry points. Users can initiate a workflow by sending a message to these points, and the orchestrator starts the workflow based on these configurations.

Data Management in Orchestrator Runtime
Event Store:
The orchestrator maintains an append-only event store. This MongoDB store aids in:

Duplicate message detection
Out-of-context validations
Providing the basis for the Synchronizer component to identify the last command for replay during SLA breaches
Query Store:
The Query Store keeps track of the latest state of each in-flight payment. The orchestrator updates this MongoDB document as it progresses through the workflow. This store serves as:

A snapshot for current payment status
A source for external scheduled jobs or application UI to fetch current statuses
Event Ordering in Orchestrator Runtime
The Orchestrator ensures that all events related to a specific payment are processed in a particular order by using the payment transaction ID as the message key in Kafka. Leveraging Kafka's default partitioner, it ensures that messages for a given payment always land in the same partition and are processed in the sequence they were produced. This mechanism allows the orchestrator to handle thousands of payments in parallel while keeping the sequence of events for each specific payment intact.

Data Management in Participant Services
Participants are responsible for maintaining their independent state stores. These local stores enable:

Localized logic implementation
Duplicate message identification
Any additional state requirements specific to the participant
Participant Obligations
Participants are obligated to:

Be prepared for duplicate events
Not tamper with the Transaction and Context IDs
Honor the SLAs as configured in MongoDB
Synchronizer
The Synchronizer is a scheduled component within the Orchestrator library that continually scans for response delays from participants based on the configured SLAs. In case of a delay, it replays the last command to the participant, incrementing the max attempt counter for that specific command.

Examples, FAQs, Troubleshooting, Contact & Support, Change Log
For additional support and troubleshooting, please refer to the provided examples, frequently asked questions, and change logs, or contact our support team directly.
